package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USUARIOS".
*/
public class UsuariosDao extends AbstractDao<Usuarios, Long> {

    public static final String TABLENAME = "USUARIOS";

    /**
     * Properties of entity Usuarios.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id_user = new Property(0, Long.class, "id_user", true, "ID_USER");
        public final static Property Usu_nombre = new Property(1, String.class, "usu_nombre", false, "USU_NOMBRE");
        public final static Property Usu_nick = new Property(2, String.class, "usu_nick", false, "USU_NICK");
        public final static Property Usu_fecha = new Property(3, String.class, "usu_fecha", false, "USU_FECHA");
        public final static Property Usu_email = new Property(4, String.class, "usu_email", false, "USU_EMAIL");
        public final static Property Usu_password = new Property(5, String.class, "usu_password", false, "USU_PASSWORD");
    }


    public UsuariosDao(DaoConfig config) {
        super(config);
    }
    
    public UsuariosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USUARIOS\" (" + //
                "\"ID_USER\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id_user
                "\"USU_NOMBRE\" TEXT," + // 1: usu_nombre
                "\"USU_NICK\" TEXT UNIQUE ," + // 2: usu_nick
                "\"USU_FECHA\" TEXT," + // 3: usu_fecha
                "\"USU_EMAIL\" TEXT," + // 4: usu_email
                "\"USU_PASSWORD\" TEXT);"); // 5: usu_password
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USUARIOS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Usuarios entity) {
        stmt.clearBindings();
 
        Long id_user = entity.getId_user();
        if (id_user != null) {
            stmt.bindLong(1, id_user);
        }
 
        String usu_nombre = entity.getUsu_nombre();
        if (usu_nombre != null) {
            stmt.bindString(2, usu_nombre);
        }
 
        String usu_nick = entity.getUsu_nick();
        if (usu_nick != null) {
            stmt.bindString(3, usu_nick);
        }
 
        String usu_fecha = entity.getUsu_fecha();
        if (usu_fecha != null) {
            stmt.bindString(4, usu_fecha);
        }
 
        String usu_email = entity.getUsu_email();
        if (usu_email != null) {
            stmt.bindString(5, usu_email);
        }
 
        String usu_password = entity.getUsu_password();
        if (usu_password != null) {
            stmt.bindString(6, usu_password);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Usuarios entity) {
        stmt.clearBindings();
 
        Long id_user = entity.getId_user();
        if (id_user != null) {
            stmt.bindLong(1, id_user);
        }
 
        String usu_nombre = entity.getUsu_nombre();
        if (usu_nombre != null) {
            stmt.bindString(2, usu_nombre);
        }
 
        String usu_nick = entity.getUsu_nick();
        if (usu_nick != null) {
            stmt.bindString(3, usu_nick);
        }
 
        String usu_fecha = entity.getUsu_fecha();
        if (usu_fecha != null) {
            stmt.bindString(4, usu_fecha);
        }
 
        String usu_email = entity.getUsu_email();
        if (usu_email != null) {
            stmt.bindString(5, usu_email);
        }
 
        String usu_password = entity.getUsu_password();
        if (usu_password != null) {
            stmt.bindString(6, usu_password);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Usuarios readEntity(Cursor cursor, int offset) {
        Usuarios entity = new Usuarios( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id_user
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // usu_nombre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // usu_nick
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // usu_fecha
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // usu_email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // usu_password
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Usuarios entity, int offset) {
        entity.setId_user(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsu_nombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUsu_nick(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsu_fecha(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUsu_email(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUsu_password(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Usuarios entity, long rowId) {
        entity.setId_user(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Usuarios entity) {
        if(entity != null) {
            return entity.getId_user();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Usuarios entity) {
        return entity.getId_user() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
